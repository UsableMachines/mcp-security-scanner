/**
 * Abstract vulnerability scanner interface for MCP Security Scanner
 * Supports multiple vulnerability scanners (OSV, Trivy) with unified API
 */

import { z } from 'zod';

// Unified vulnerability schema
export const VulnerabilitySchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string(),
  severity: z.enum(['critical', 'high', 'medium', 'low', 'unknown']),
  cvssScore: z.number().optional(),
  cveIds: z.array(z.string()).optional(),
  packageName: z.string(),
  packageVersion: z.string(),
  ecosystem: z.string(),
  fixedVersion: z.string().optional(),
  references: z.array(z.string()).optional(),
  publishedDate: z.string().optional(),
  modifiedDate: z.string().optional(),
  source: z.enum(['osv', 'trivy']) // Track which scanner found this
});

export const ScanResultSchema = z.object({
  scanner: z.enum(['osv', 'trivy']),
  totalPackagesScanned: z.number(),
  vulnerablePackages: z.number(),
  totalVulnerabilities: z.number(),
  severityBreakdown: z.object({
    critical: z.number(),
    high: z.number(),
    medium: z.number(),
    low: z.number(),
    unknown: z.number()
  }),
  vulnerabilities: z.array(VulnerabilitySchema),
  scanDuration: z.number(),
  success: z.boolean(),
  error: z.string().optional()
});

export const CombinedScanResultSchema = z.object({
  osvResult: ScanResultSchema.optional(),
  trivyResult: ScanResultSchema.optional(),
  combinedVulnerabilities: z.array(VulnerabilitySchema),
  combinedSeverityBreakdown: z.object({
    critical: z.number(),
    high: z.number(),
    medium: z.number(),
    low: z.number(),
    unknown: z.number()
  }),
  totalUniqueVulnerabilities: z.number(),
  scannerComparison: z.object({
    osvOnly: z.number(),
    trivyOnly: z.number(),
    bothScanners: z.number()
  }),
  combinedScanDuration: z.number()
});

export type Vulnerability = z.infer<typeof VulnerabilitySchema>;
export type ScanResult = z.infer<typeof ScanResultSchema>;
export type CombinedScanResult = z.infer<typeof CombinedScanResultSchema>;

// Scanning targets
export interface DockerImageTarget {
  type: 'docker-image';
  imageId: string;
  imageName?: string;
  tarballPath?: string;
}

export interface RepositoryTarget {
  type: 'repository';
  path: string;
  repoUrl?: string;
}

export interface PackageListTarget {
  type: 'package-list';
  packages: Array<{
    name: string;
    version: string;
    ecosystem?: string;
  }>;
}

export type ScanTarget = DockerImageTarget | RepositoryTarget | PackageListTarget;

// Abstract vulnerability scanner interface
export abstract class VulnerabilityScanner {
  abstract readonly name: string;

  /**
   * Scan a Docker container image for vulnerabilities
   */
  abstract scanDockerImage(target: DockerImageTarget): Promise<ScanResult>;

  /**
   * Scan a source code repository for vulnerabilities
   */
  abstract scanRepository(target: RepositoryTarget): Promise<ScanResult>;

  /**
   * Scan a list of packages for vulnerabilities
   */
  abstract scanPackages(target: PackageListTarget): Promise<ScanResult>;

  /**
   * Health check - verify scanner is available and working
   */
  abstract healthCheck(): Promise<boolean>;

  /**
   * Get scanner version info
   */
  abstract getVersion(): Promise<string>;

  protected createErrorResult(error: string, duration: number): ScanResult {
    return {
      scanner: this.name as 'osv' | 'trivy',
      totalPackagesScanned: 0,
      vulnerablePackages: 0,
      totalVulnerabilities: 0,
      severityBreakdown: {
        critical: 0,
        high: 0,
        medium: 0,
        low: 0,
        unknown: 0
      },
      vulnerabilities: [],
      scanDuration: duration,
      success: false,
      error
    };
  }
}